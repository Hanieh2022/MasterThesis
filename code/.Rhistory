tb_paino, Syvu, palkansa, ika,
sukup, lisco2010_1,
K11a_1, K11a_2, K11a_3,
K21b_1, K52c, K52a, K52b,
K48, K43a)
data2022 <- all_data2022 %>% dplyr::select(fsd_no, fsd_id, vastaustapa,
tb_paino, Syvu, palkansa, ika,
sukup, lisco2010_1,
K11a_1, K11a_2, K11a_3,
K21b_1, K52c, K52a, K52b,
K48, K43a)
#-------------------------------------------------------------------------------
for (i in 6:ncol(data2018))
print(table(data2018[i], useNA = "ifany"))
data2018$lisco_1[is.na(data2018$lisco_1)] <- 99
data2018$K11A_1[data2018$K11A_1 == 5] <- NA
data2018$K11A_3[data2018$K11A_3 == 5] <- NA
data2018$K21B_1[data2018$K21B_1 == 9] <- NA
data2018$K52b[data2018$K52b == 9] <- NA
data2018$K48[data2018$K48 == 3] <- NA
data2018$K43A[data2018$K43A == 9] <- NA
for (i in 6:ncol(data2018))
print(table(data2018[i], useNA = "ifany"))
#-------------------------------------------------------------------------------
for (i in 6:ncol(data2019))
print(table(data2019[i], useNA = "ifany"))
data2019$lisco_1[is.na(data2019$lisco_1)] <- 99
data2019$k11a_1[data2019$k11a_1 == 5] <- NA
data2019$k11a_2[data2019$k11a_2 == 5] <- NA
data2019$k11a_3[data2019$k11a_3 == 5] <- NA
data2019$k21b_1[data2019$k21b_1 == 9] <- NA
data2019$k52b[data2019$k52b == 9] <- NA
data2019$k48[data2019$k48 == 3] <- NA
data2019$k43a[data2019$k43a == 9] <- NA
for (i in 6:ncol(data2019))
print(table(data2019[i], useNA = "ifany"))
#-------------------------------------------------------------------------------
for (i in 6:ncol(data2020))
print(table(data2020[i], useNA = "ifany"))
data2020$lisco_1[is.na(data2020$lisco_1)] <- 99
data2020$K11A_1[data2020$K11A_1 == 5] <- NA
data2020$K11A_3[data2020$K11A_3 == 5] <- NA
data2020$K52b[data2020$K52b == 9] <- NA
data2020$K48[data2020$K48 == 3] <- NA
for (i in 6:ncol(data2020))
print(table(data2020[i], useNA = "ifany"))
#-------------------------------------------------------------------------------
for (i in 7:ncol(data2021))
print(table(data2021[i], useNA = "ifany"))
data2021$lisco2010_1[is.na(data2021$lisco2010_1)] <- 99
data2021$K11a_1[data2021$K11a_1 == 8] <- NA
data2021$K11a_2[data2021$K11a_2 == 8] <- NA
data2021$K11a_2[data2021$K11a_2 == 9] <- NA
data2021$K11a_3[data2021$K11a_3 == 9] <- NA
data2021$K21b_1[data2021$K21b_1 == 9] <- NA
data2021$K52c[data2021$K52c == 9] <- NA
data2021$K52a[data2021$K52a == 9] <- NA
data2021$K52b[data2021$K52b == 9] <- NA
data2021$K48[is.na(data2021$K48)] <- 2
data2021$K43a[data2021$K43a == 9] <- NA
for (i in 7:ncol(data2021))
print(table(data2021[i], useNA = "ifany"))
#-------------------------------------------------------------------------------
for (i in 7:ncol(data2022))
print(table(data2022[i], useNA = "ifany"))
data2022$lisco2010_1[is.na(data2022$lisco2010_1)] <- 99
data2022$K11a_1[data2022$K11a_1 == 9] <- NA
data2022$K11a_2[data2022$K11a_2 == 9] <- NA
data2022$K11a_3[data2022$K11a_3 == 9] <- NA
data2022$K21b_1[data2022$K21b_1 == 9] <- NA
data2022$K52c[data2022$K52c == 9] <- NA
data2022$K52a[data2022$K52a == 9] <- NA
data2022$K52b[data2022$K52b == 9] <- NA
data2022$K48[is.na(data2022$K48)] <- 2
for (i in 7:ncol(data2022))
print(table(data2022[i], useNA = "ifany"))
#-------------------------------------------------------------------------------
# turn weighting coeff 2020 from int to chr to be compatible with other years
data2020$tb_paino <- as.character(data2020$tb_paino)
# turn data sets' variable to factor
cdata2018 <- data.frame(sapply(data2018, as.factor))
cdata2019 <- data.frame(sapply(data2019, as.factor))
cdata2020 <- data.frame(sapply(data2020, as.factor))
cdata2021 <- data.frame(sapply(data2021, as.factor))
cdata2022 <- data.frame(sapply(data2022, as.factor))
# harmonize column's names
cdata2018 <- rename(data2018, K11a_1 = K11A_1, K11a_2 = K11A_2, K11a_3 = K11A_3,
K21b_1 = K21B_1, K43a = K43A)
cdata2019 <- rename(data2019, Syvu = syvu, K11a_1 = k11a_1,
K11a_2 = k11a_2, K11a_3 = k11a_3,
K21b_1 = k21b_1, K52c = k52c, K52a = k52a,
K52b = k52b, K48 = k48, K43a = k43a)
cdata2020 <- rename(data2020, K11a_1 = K11A_1, K11a_2 = K11A_2, K11a_3 = K11A_3,
K21b_1 = K21B_1, K43a = K43A)
cdata2021 <- rename(data2021, lisco_1 = lisco2010_1, sose = palkansa)
cdata2022 <- rename(data2022, lisco_1 = lisco2010_1, sose = palkansa)
# combine 5 data sets
data <- dplyr::bind_rows(cdata2018, cdata2019, cdata2020, cdata2021, cdata2022)
# create 'year' variable out of 'fsd_no'
data <- data %>%
mutate(year = fsd_no %>%
factor() %>%
fct_recode("2018" = "3482",
"2019" = "3493",
"2020" = "3645",
"2021" = "3727",
"2022" = "3784"))
# create 'age' variable out of 'ika'
data$age <- cut(data$ika, breaks = c(18, 25, 35, 45, 55, 66),
include.lowest = TRUE,
right = FALSE, labels = c(1, 2, 3, 4, 5))
# 18-24 / 25-34 / 35-44 / 45/54/ 55-66
# 35 years old = group 3
# transform weight from string to numeric
data$tb_paino <- ifelse(grepl("^,", data$tb_paino),
paste0("0", data$tb_paino),
data$tb_paino)
data$tb_paino <- gsub(",", ".", data$tb_paino)
data$tb_paino <- as.numeric(data$tb_paino)
# check the integrated data (only categorical variables)
for (i in 5:17)
print(table(data[i], useNA = "ifany"))
#-------------------------------------------------------------------------------
# change scale and direction for all items of dimension 1
data$new_K11a_1 <- as.numeric(data$K11a_1)
data$new_K11a_1 <- (1/3)*(4-data$new_K11a_1)
data$new_K11a_2 <- as.numeric(data$K11a_2)
data$new_K11a_2 <- (1/3)*(4-data$new_K11a_2)
data$new_K11a_3 <- as.numeric(data$K11a_3)
data$new_K11a_3 <- (1/3)*(4-data$new_K11a_3)
# 2-level variables: change direction
data$new_K21b_1 <- as.numeric(data$K21b_1)
data$new_K21b_1 <- (2-data$new_K21b_1)
data$new_K52c <- as.numeric(data$K52c)
data$new_K52c <- (2-data$new_K52c)
data$new_K52a <- as.numeric(data$K52a)
data$new_K52a <- (2-data$new_K52a)
data$new_K52b <- as.numeric(data$K52b)
data$new_K52b <- (2-data$new_K52b)
data$new_K48 <- as.numeric(data$K48)
data$new_K48 <- (2-data$new_K48)
data$new_K43a <- as.numeric(data$K43a)
data$new_K43a <- (1/4)*(5-data$new_K43a)
#-------------------------------------------------------------------------------
# autonomy
data$autonomy <- rowMeans(data[,21:23], na.rm=TRUE)
summary(data$autonomy)  # mean: 0.4555
# continuous skill-building
data$skill_building <- rowMeans(data[,24:27], na.rm=TRUE)
summary(data$skill_building)   # mean: 0.4739
# collaborative_work
data$collaborative_work <- rowMeans(data[,28:29], na.rm=TRUE)
summary(data$collaborative_work)   # mean: 0.4839
# work complexity
data$work_complexity <- rowMeans(data[,30:32], na.rm=TRUE)
summary(data$work_complexity)   # mean: 0.4711
# save data
write.table(data, file = "../data/final_data.txt", row.names = FALSE, sep = ',')
#-------------------------------------------------------------------------------
# weighting data
# read register data
register2022 <- read.csv("../data/register2022.csv", sep = ',')
register2021 <- read.csv("../data/register2021.csv", sep = ',')
register2020 <- read.csv("../data/register2020.csv", sep = ',')
register2019 <- read.csv("../data/register2019.csv", sep = ',')
register2018 <- read.csv("../data/register2018.csv", sep = ',')
register <- dplyr::bind_rows(register2018, register2019, register2020, register2021, register2022)
register_long <- register %>%
pivot_longer(cols = c('Males', 'Females'), names_to = "Gender.group", values_to = "Joint")
register_long <- register_long %>%
mutate(Population.size = case_when(Year == '2018' ~ 2135347,
Year == '2019' ~ 2133398,
Year == '2020' ~ 2046297,
Year == '2021' ~ 2133908,
Year == '2022' ~ 2180180))
register_long <- register_long %>%
mutate(Population.proportion = Joint/Population.size)
# save the output of cross-tabulation of 'occupation' and 'gender'
cross_class2018 <- as.data.frame(unclass(table(cdata2018$lisco_1, cdata2018$sukup)))
colnames(cross_class2018) <- c('males', 'females')
cross_class2018$Occupational.group <- rownames(cross_class2018)
cross_class2018$Year <- 2018
cross_class2019 <- as.data.frame(unclass(table(cdata2019$lisco_1, cdata2019$sukup)))
colnames(cross_class2019) <- c('males', 'females')
cross_class2019$Occupational.group <- rownames(cross_class2019)
cross_class2019$Year <- 2019
cross_class2020 <- as.data.frame(unclass(table(cdata2020$lisco_1, cdata2020$sukup)))
colnames(cross_class2020) <- c('males', 'females')
cross_class2020$Occupational.group <- rownames(cross_class2020)
cross_class2020$Year <- 2020
cross_class2021 <- as.data.frame(unclass(table(cdata2021$lisco_1, cdata2021$sukup)))
colnames(cross_class2021) <- c('males', 'females')
cross_class2021$Occupational.group <- rownames(cross_class2021)
cross_class2021$Year <- 2021
cross_class2022 <- as.data.frame(unclass(table(cdata2022$lisco_1, cdata2022$sukup)))
colnames(cross_class2022) <- c('males', 'females')
cross_class2022$Occupational.group <- rownames(cross_class2022)
cross_class2022$Year <- 2022
sample <- dplyr::bind_rows(cross_class2018, cross_class2019, cross_class2020, cross_class2021, cross_class2022)
sample_long <- sample %>%
pivot_longer(cols = c('males', 'females'), names_to = "gender.group", values_to = "joint")
sample_long <- sample_long %>%
mutate(sample.size = case_when(Year == '2018' ~ nrow(cdata2018),
Year == '2019' ~ nrow(cdata2019),
Year == '2020' ~ nrow(cdata2020),
Year == '2021' ~ nrow(cdata2021),
Year == '2022' ~ nrow(cdata2022)))
sample_long <- sample_long %>%
mutate(gender.group = gender.group %>%
factor() %>%
fct_recode("Males" = "males",
"Females" = "females"))
sample_long <- sample_long %>% rename(Gender.group = gender.group)
merged_sample <- merge(register_long, sample_long)
merged_sample$weight <- merged_sample$Population.proportion/merged_sample$joint
merged_sample$scaled_weight <- merged_sample$weight*1000
weight <- merged_sample[c(1, 2, 3, 9)]
weight <- weight %>%
mutate(Gender.group = Gender.group %>%
factor() %>%
fct_recode("1" = "Males",
"2" = "Females"))
data <- merge(data, weight,
by.x = c("sukup", "lisco_1", "year"),
by.y = c("Gender.group", "Occupational.group", "Year"))
View(data)
View(merged_sample)
weight <- merged_sample[c(1, 2, 3, 9, 10)]
weight <- weight %>%
mutate(Gender.group = Gender.group %>%
factor() %>%
fct_recode("1" = "Males",
"2" = "Females"))
data <- merge(data, weight,
by.x = c("sukup", "lisco_1", "year"),
by.y = c("Gender.group", "Occupational.group", "Year"))
View(data)
data$weighted_autonomy <- data$autonomy*data$scaled_weight
View(data)
data$weighted_skill_building <- data$skill_building*data$scaled_weight
data$weighted_collaborative_work <- data$collaborative_work*data$scaled_weight
View(data)
data$weighted_work_complexity2 <- rowMeans(data[,37:39], na.rm=TRUE)
data$weighted_work_complexity <- rowMeans(data[,37:39], na.rm=TRUE)
# calculate overall work complexity and dimensions per year
data %>%
group_by(year) %>%
summarise(wc_mean = weighted.mean(work_complexity, na.rm=TRUE, w = scaled_weight),
auto_mean = weighted.mean(autonomy, na.rm=TRUE, w = scaled_weight),
sb_mean = weighted.mean(skill_building, na.rm=TRUE, w = scaled_weight),
cw_mean = weighted.mean(collaborative_work, na.rm=TRUE, w = scaled_weight))
# calculate overall work complexity and dimensions for gender groups
data %>%
group_by(sukup) %>%
summarise(wc_mean = weighted.mean(work_complexity, na.rm=TRUE, w = scaled_weight),
auto_mean = weighted.mean(autonomy, na.rm=TRUE, w = scaled_weight),
sb_mean = weighted.mean(skill_building, na.rm=TRUE, w = scaled_weight),
cw_mean = weighted.mean(collaborative_work, na.rm=TRUE, w = scaled_weight))
# chech normality
ggplot(data, aes(x = weighted_work_complexity)) +
geom_histogram() +
facet_wrap(vars(age))
ggplot(data, aes(x = ika, y = weighted_work_complexity)) +
geom_point() +
geom_smooth() +
geom_jitter()
# check linearity
ggplot(data, aes(x = sukup, y = collaborative_work)) +
geom_point() +
geom_smooth(method = "lm") +
geom_jitter()
# check linearity
ggplot(data, aes(x = sukup, y = work_complexity)) +
geom_point() +
geom_smooth(method = "lm") +
geom_jitter()
ggplot(data, aes(x = age, y = weighted_work_complexity)) +
geom_point() +
geom_smooth() +
geom_jitter()
table(data$lisco_1)
sum(data$scaled_weight)
# check linearity
ggplot(data, aes(x = sukup, y = weighted_work_complexity)) +
geom_point() +
geom_smooth(method = "lm") +
geom_jitter()
sum(data$scaled_weight)
# check linearity
ggplot(data, aes(x = sukup, y = weighted_collaborative_work)) +
geom_point() +
geom_smooth(method = "lm") +
geom_jitter()
# check linearity
ggplot(data, aes(x = sukup, y = collaborative_work)) +
geom_point() +
geom_smooth(method = "lm") +
geom_jitter()
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(age))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(sukup)) +
geom_jitter()
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(sukup)) +
geom_jitter()
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = work_complexity)) +
geom_histogram() +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram()
geom_histogram((aes(y = ..density..)) +
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
ggplot(data, aes(x = collaborative_work)) +
geom_histogram() +
facet_wrap(vars(sukup))
geom_histogram((aes(y = ..density..), binwidth = 5, color = "black", fill = "white") +
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 5, color = "black", fill = "white") +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 2) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.25) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = weighted_collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
median(data$collaborative_work)
median(data$collaborative_work, na.rm = TRUE)
median(data$weighted_collaborative_work, na.rm = TRUE)
mean(data$weighted_collaborative_work, na.rm = TRUE)
mean(data$collaborative_work, na.rm = TRUE)
wilcox.test(weighted_collaborative_work ~ sukup, data = data)
wilcox.test(collaborative_work ~ sukup, data = data)
data_design <- svydesign(ids=~0, strata=NULL, weights=~scaled_weight,
nest=TRUE, data=data)
svyttest(collaborative_work ~ sukup, design = data_design)
svyttest(work_complexity ~ sukup, design = data_design)
# chech normality
ggplot(data, aes(x = weighted_collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
stat_function(fun=dnorm) +
#-------------------------------------------------------------------------------
# regression analysis with own calculated weight
model <- lm(work_complexity ~ as_factor(sukup) + as_factor(age), data = data21_22, weight = weight)
ggplot(data, aes(x = weighted_collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
stat_function(fun=dnorm)
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
stat_function(fun=dnorm)
# chech normality
ggplot(data, aes(x = weighted_collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.4) +
stat_function(fun=dnorm)
# chech normality
ggplot(data, aes(x = weighted_collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.4) +
stat_function(fun=dnorm)
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm)
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.3) +
stat_function(fun=dnorm)
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm)
data %>%
group_by(sukup) %>%
summarise(wc_mean = mean(work_complexity, na.rm=TRUE),
auto_mean = mean(autonomy, na.rm=TRUE),
sb_mean = mean(skill_building, na.rm=TRUE),
cw_mean = mean(collaborative_work, na.rm=TRUE))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = work_complexity)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = autonomy)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
stat_function(fun=dnorm) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.4) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.3) +
facet_wrap(vars(sukup))
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.3) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = collaborative_work)) +
geom_histogram(aes(y = ..density..), binwidth = 0.3) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = work_complexity)) +
geom_histogram(aes(y = ..density..), binwidth = 0.3) +
facet_wrap(vars(sukup))
# chech normality
ggplot(data, aes(x = skill_building)) +
geom_histogram(aes(y = ..density..), binwidth = 0.3) +
facet_wrap(vars(sukup))
t.test()
data %>%
group_by(sukup) %>%
summarise(work_complexity=sd(work_complexity, na.rm=TRUE)
data %>%
group_by(sukup) %>%
summarise(work_complexity=sd(work_complexity, na.rm=TRUE)
sd(data$work_complexity)
data %>% group_by(sukup) %>% summarise(work_complexity_sd=sd(work_complexity, na.rm=TRUE)
data %>% group_by(sukup) %>% summarise(work_complexity_sd=mean(work_complexity, na.rm=TRUE)
data %>% group_by(sukup) %>% sd(work_complexity, na.rm=TRUE)
data %>% group_by(sukup) %>% sd(work_complexity)
View(data)
data %>%
group_by(sukup) %>%
summarise(wc_mean = sd(work_complexity, na.rm=TRUE),
auto_mean = sd(autonomy, na.rm=TRUE),
sb_mean = sd(skill_building, na.rm=TRUE),
cw_mean = sd(collaborative_work, na.rm=TRUE))
